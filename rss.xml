

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>myHobbyBest</title>
  <subtitle>personal notes for studying flutter &amp; dart</subtitle>
  <updated>2022-11-09T15:01:09+09:00</updated>
  <author>
    <name>Aesop Han</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator>
  <rights> © 2022 Aesop Han </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>다시 시도하는 Chirpy 테마</title>
    <link href="http://localhost:4000/posts/retrying_jekyll_chirpy_theme/" rel="alternate" type="text/html" title="다시 시도하는 Chirpy 테마" />
    <published>2022-11-07T23:14:09+09:00</published>
  
    <updated>2022-11-09T08:35:20+09:00</updated>
  
    <id>http://localhost:4000/posts/retrying_jekyll_chirpy_theme/</id>
    <content src="http://localhost:4000/posts/retrying_jekyll_chirpy_theme/" />
    <author>
      <name>Aesop Han</name>
    </author>

  
    
    <category term="Github-Pages" />
    
    <category term="jekyll blog" />
    
  

  
    <summary>
      





      Chirpy Theme 설치

오류의 원인

첫 글에서 언급했듯이 처음에 Chirpy 테마 설치 시에 잘못된 점은  .gitignor 파일에서 Gemfile.lock 항목을 지웠어야 하는데 오히려 디렉토리에 있는 Gemfile.lock 파일을 지워버리고   .gitignor  파일에 Gemfile.lock 항목을 또 한번 적어버린 점이다. 이렇게 하니 git push 에서 에러가 발생하는것은 당연한 것인지도 모른다.
(다른 뉴비분들이 나같은 같은 실수를 반복하지 않기를 바란다.)
안타까운 것은 로컬(localhost:4000)에서 이런 종류의 오류가 걸러지지 않는다는 것이다. 뒤에도 나오지만 로컬에서 걸러지지 않는 많은 에러들 때문에 리모트에서 반복되는 빌드에러가 발생한다.

Windows PowerS...
    </summary>
  

  </entry>

  
  <entry>
    <title>Dart문법(4) - Map</title>
    <link href="http://localhost:4000/posts/dart-syntax4/" rel="alternate" type="text/html" title="Dart문법(4) - Map" />
    <published>2022-11-07T00:01:30+09:00</published>
  
    <updated>2022-11-07T00:01:30+09:00</updated>
  
    <id>http://localhost:4000/posts/dart-syntax4/</id>
    <content src="http://localhost:4000/posts/dart-syntax4/" />
    <author>
      <name>Aesop Han</name>
    </author>

  
    
    <category term="Dart syntax" />
    
    <category term="Flutter" />
    
  

  
    <summary>
      





      Map

Map 을 초기화하는 방법들


  
    괄호  (curly braces, {} )를 이용해 간단하게 초기화
  
  from(), of() constructor를 이용해 다른 Map 으로부터 모든l key/value 쌍을 생성er Map using from(), of() constructor.
  fromIterables() 을 이용해 주어진 key/value 값으로부터 새로운 Map을 생성.
  fromIterables() 을 이용해 key/value 값을 계산하여 새로운 Map을 생성.
  unmodifiable() 을 이용해 상수의 Map을 생성.



Map&amp;lt;String, int&amp;gt; map1 = {'zero': 0, 'one': 1, 'two': 2};
print(map1...
    </summary>
  

  </entry>

  
  <entry>
    <title>Dart문법(3) - List</title>
    <link href="http://localhost:4000/posts/dart-syntax3/" rel="alternate" type="text/html" title="Dart문법(3) - List" />
    <published>2022-11-06T17:20:30+09:00</published>
  
    <updated>2022-11-06T17:20:30+09:00</updated>
  
    <id>http://localhost:4000/posts/dart-syntax3/</id>
    <content src="http://localhost:4000/posts/dart-syntax3/" />
    <author>
      <name>Aesop Han</name>
    </author>

  
    
    <category term="Dart syntax" />
    
    <category term="Flutter" />
    
  

  
    <summary>
      





      List


List&amp;lt;int&amp;gt; items = [1, 2, 3];
  print(items.length); // 3 (요소의 총갯수 )
  print(items.reversed); // 3,2,1 
  print(items.runtimeType); // JSArray&amp;lt;int&amp;gt;
  print(items.first); //  1   첫번재 요소
  print(items.last);  // 3  마지막 요소
  print(items.isEmpty); // false
  print(items.isNotEmpty); // true
  items.hashCode; //  객체가 같은지 여부를 빠르게 판단하기 위해 사용됨.  객체의 내부 요소들을 정수로 변환하여 구현 
  items.single...
    </summary>
  

  </entry>

  
  <entry>
    <title>Dart문법(2)-Ternary operator, type casting, function</title>
    <link href="http://localhost:4000/posts/dart-syntax2/" rel="alternate" type="text/html" title="Dart문법(2)-Ternary operator, type casting, function" />
    <published>2022-11-05T21:00:50+09:00</published>
  
    <updated>2022-11-05T21:00:50+09:00</updated>
  
    <id>http://localhost:4000/posts/dart-syntax2/</id>
    <content src="http://localhost:4000/posts/dart-syntax2/" />
    <author>
      <name>Aesop Han</name>
    </author>

  
    
    <category term="Dart syntax" />
    
    <category term="Flutter" />
    
  

  
    <summary>
      





      삼항 연산자(Ternary operator)

    bool isClear = true;
    var weather = isClear == true ? '맑음' : '흐림';


Cascade notation

    // var paint = Paint();
    // paint.color = 'black';
    // paint.strokeCap = ;

    var paint = Paint()  // ';' 를 붙이지 않는다. 
    ..color = 'black'
    ..strokeCap = ;



type casting


    num i = 10;
    int ii = i as int;  // type 이 달라서 오류날 때 강제로 type을 일치시킨다.

    num d...
    </summary>
  

  </entry>

  
  <entry>
    <title>Dart문법(1) - type, null-safty, loop</title>
    <link href="http://localhost:4000/posts/dart-syntax1/" rel="alternate" type="text/html" title="Dart문법(1) - type, null-safty, loop" />
    <published>2022-11-04T23:00:09+09:00</published>
  
    <updated>2022-11-04T23:00:09+09:00</updated>
  
    <id>http://localhost:4000/posts/dart-syntax1/</id>
    <content src="http://localhost:4000/posts/dart-syntax1/" />
    <author>
      <name>Aesop Han</name>
    </author>

  
    
    <category term="Dart syntax" />
    
    <category term="Flutter" />
    
  

  
    <summary>
      





      Dart문법 (1)

변수 type

int num1 = 10;
double num2 = 3.0;
String str = 'hello';
bool isTrue = true;
num num3 = 10;
num num4 = 10.0

print(num1 is int); // true
print(mun2 is int); // false

print(num1.runtimeType); //int

var 은 compile time에 type 이 결정되지만
dynamic 은 runtime에 type 이 결정된다

null safty

int? age ; //nullable
print(age == null); // true

String? name;
String result = name; //error null이 ...
    </summary>
  

  </entry>

</feed>


